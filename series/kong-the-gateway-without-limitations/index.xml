<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kong - The Gateway Without Limitations on Technology Blog</title>
    <link>https://nttdata-dach.github.io/series/kong-the-gateway-without-limitations/</link>
    <description>Recent content in Kong - The Gateway Without Limitations on Technology Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright 2025 NTT DATA Deutschland SE - This site does not use any cookies</copyright>
    <lastBuildDate>Thu, 17 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nttdata-dach.github.io/series/kong-the-gateway-without-limitations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Part 11: RAG team play with Spring AI</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-rag_teamplay/</link>
      <pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-rag_teamplay/</guid>
      <description>This blog talks about Kong&amp;rsquo;s potential for Retrieval-Augmented Generation (RAG) implementations. RAG is a technique that improves large language models by adding real-time, enterprise-specific data retrieval, improving response accuracy and relevance. The team play between Kong AI Gateway and Spring AI enables seamless integration and optimization of generative AI RAG workflows within enterprise environments.</description>
    </item>
    <item>
      <title>Part 10: AI Gateway</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-aigateway/</link>
      <pubDate>Sat, 14 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-aigateway/</guid>
      <description>This blog details how Kong API Gateway functions as an AI Gateway, providing the necessary features to manage AI integrations securely and efficiently. Kong offers a complete, high-quality middleware solution that makes AI development easier by removing the need for many special tools and frameworks. It also supports language independence to avoid any limits. Additionally, the new AI plugins empower organizations to mitigate AI risks and uphold ethical AI practices.</description>
    </item>
    <item>
      <title>Part 9: Serverless functions - Who responded?</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-serverlessfunctions/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-serverlessfunctions/</guid>
      <description>In our previous blog posts in the Kong Gateway series, we explored various security aspects, particularly focusing on token-related issues and their solutions involving both Kong and custom-built plugins. Today, we dive deeper into another coding variant within the gateway: Kong serverless functions. We will use a real-world “Who Responded?” example to demonstrate how effectively a root cause analysis approach can be supported with minimal effort.</description>
    </item>
    <item>
      <title>Part 8: Plugin Cloning</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-plugincloning/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-plugincloning/</guid>
      <description>This time we explore how plugin cloning of the Access Control List (ACL) Plugin enhances API security within a zero-trust architecture. We address the challenge of executing the ACL plugin twice, first for a consumer authenticated via an mTLS client certificate and then for a consumer authenticated via an OAuth2 token in the same processing pipeline, as the Kong’s architecture prevents the same plugin from running multiple times in a single request-response cycle. To meet this challenge, we introduce the Kong supported Priority-Updater tool, which enables cloning and priority configuration of existing plugins. This blog provides a comprehensive guide to implementing multi-layer authentication by plugin cloning.</description>
    </item>
    <item>
      <title>Part 7: Token Cloning</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-tokencloning/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-tokencloning/</guid>
      <description>Building on the previous post, we discuss an architectural pattern for token handling called &amp;rsquo;therapeutic token cloning&amp;rsquo;, which is particularly effective in environments that use multiple identity and access management products. The pattern involves duplicating, correcting, and then re-signing access tokens to make them functional and more secure. This article details the steps involved in the token cloning process, as well as the pros and cons of this approach.</description>
    </item>
    <item>
      <title>Part 6: Token Validation</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-tokenvalidation/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-tokenvalidation/</guid>
      <description>This time we discuss token validation in the context of the Kong Gateway, covering topics such as OpenID Connect, OAuth 2.0, and Zero-Trust Architecture. The article explains the different types of tokens, the benefits of offline validation, and the various Kong plugins that support token validation. The article notes that architectural trade-offs may be required regarding revocation and fine-grained authorization validation, and concludes that Kong Gateway offers ample options for token validation, including the ability to write custom plugins.</description>
    </item>
    <item>
      <title>Part 5: mTLS Header</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-mtls_header/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-mtls_header/</guid>
      <description>Mutual transport layer security (mTLS) with consumer authentication using client certificates at the Kong Gateway plays an important role in building a zero-trust architecture. But perimeter security devices that perform TLS termination, so-called TLS terminating reverse proxies (TTRP), break the automatic mapping of client certificates to Kong consumers. This blog demonstrates mTLS consumer authentication even with preceding TTRPs, without requiring TCP passthrough.</description>
    </item>
    <item>
      <title>Part 4: SAML 2.0 Bearer Assertion Flow for OAuth 2.0</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-saml2bearer/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-saml2bearer/</guid>
      <description>My last blog provided a solution for implementing an OAuth 2.0-based On-Behalf-Of (delegation) grant flow. This time it’s about implementing a Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants. This flow allows OAuth 2.0 clients to obtain access tokens by presenting SAML 2.0 assertions as a form of authentication. This somewhat extended grant flow expands the scope for exchanging authentication and authorization data between different parties with seamless management, all achieved through the API Gateway.</description>
    </item>
    <item>
      <title>Part 3: Token Exchange On-Behalf-Of</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-onbehalfof/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-onbehalfof/</guid>
      <description>In the last blog, I provided a solution on how to overcome the character limit when logging. This time, I would like to show how to implement an OAuth 2.0-based On-Behalf-Of (delegation) grant flow. Such complex token orchestration tasks can be easily handled on the API gateway while ensuring the highest security standards which even make zero-trust architectures possible in the first place.</description>
    </item>
    <item>
      <title>Part 2: Log Chunking</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-logchunking/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-logchunking/</guid>
      <description>In the last blog, I briefly introduced Kong as a sophisticated API gateway product. This time, I will discuss a problem related to logging message size limitation and offer a solution. This problem significantly limits root cause analysis and ultimately solution development.</description>
    </item>
    <item>
      <title>Part 1: Brief Product Introduction</title>
      <link>https://nttdata-dach.github.io/posts/as-konggateway-productintroduction/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      <guid>https://nttdata-dach.github.io/posts/as-konggateway-productintroduction/</guid>
      <description>Kong Gateway is a lightweight, fast, and flexible API Gateway. It acts as an intermediary between API providers and consumers, enabling them to communicate based on policies. It also provides observability features, allowing to track API usage and performance. Overall it is a convincing and outstanding product which is briefly introduced in the following blog.</description>
    </item>
  </channel>
</rss>
